--PROCEDURE : 3
-- 1) ADDTOCART
-- 2) UPDATECART
-- 3) SIGNUPINSERTION



-- FUNCTION :2
-- 1) CONFIRM_ORDER
-- 2) SHOWCART
-- 3) ADDPRODUCT


-- TRIGGER :3
-- 1) UPDATE_PROMO_CODE
-- 2) CONFIRM_ORDER
-- 3) CHECKCART 
-- 4) CORRECT_SELLER_INFO
-- 5) CORRECT_CUSTOMER_INFO
-- 6) REVENUE
-- 7) CANCELORDER



-- INSERT --  5

-- 1+1+1
-- COMPUOUND INSERT :  3 : 1+1+1+

-- DELETE --3  -- 
--  1+1+

-- CASCADE DELETE 

-- UPDATE-- 3

--1+1+1+1+1+1+1+1+1+

--COMPOUND UPDATE 2

-- BASIC
-- 1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+

-- ADVANCE QUERY : 5 TOTAL
--JOIN 2 (3 TABLES) : 1+1+1+1+1+1+1+1+
--JOIN (4 TABLE) : 1+1+
-- JOIN (2 TABLE) : 1+1+1+1+1+1+1+1+1+

-- SUBQUERY
--  1+1+1+1+1+1+

--SET
-- 1+1+

--PL SQL

-- 1+1+1+1+



-------------------
CREATE OR REPLACE FUNCTION CONFIRM_ORDER(CARTID IN NUMBER, USERID IN NUMBER, PAYTYPE IN VARCHAR2) 
RETURN NUMBER IS
-- RETURN VARCHAR2 IS
INVOICE VARCHAR2(100);
PID NUMBER;
CQUANTITY NUMBER;
N NUMBER:=0;
PPRICE NUMBER:=0;
DISCOUNT NUMBER:=0;
TPRICE NUMBER:=0;
PSTOCK NUMBER:=0;
CDATE DATE;
BEGIN
		
		SELECT COUNT(*) INTO N FROM CART WHERE CART_ID=CARTID AND USER_ID= USERID;
		IF N<1 THEN 
-- 			RETURN '####';
				RETURN -1;
		END IF;
		-- IF CART EXISTS
		FOR PROD IN (SELECT * FROM CART WHERE CART_ID=CARTID AND USER_ID= USERID)
 		LOOP
			TPRICE :=0;
 			DBMS_OUTPUT.PUT_LINE('HOHO');
			--FETCH THE PID AND QUANTITY FROM CART (EXISTS)
      SELECT PRODUCT_ID,QUANTITY INTO PID, CQUANTITY FROM CART WHERE CART_ID=CARTID AND USER_ID= USERID  AND PRODUCT_ID=PROD.PRODUCT_ID;
			--IF PROMO CODE EXISTS 
			SELECT COUNT(*) INTO N FROM PRODUCTS WHERE PRODUCT_ID= PID AND PROMO_CODE IS NOT NULL;
 			IF (N>0) THEN
					DBMS_OUTPUT.PUT_LINE('PROMO CODE WALA '|| N);
          --FETCH DISCOUNT AND PRICE
					SELECT DISCOUNTS.DISCOUNT_AMOUNT, PRODUCTS.PRICE INTO DISCOUNT, PPRICE FROM PRODUCTS JOIN DISCOUNTS ON PRODUCTS.PROMO_CODE= DISCOUNTS.PROMO_CODE WHERE PRODUCT_ID=PID;
					DBMS_OUTPUT.PUT_LINE('DISCOUNT IS ' || DISCOUNT||'  ON '|| PID);
          --CALCULATE TOTAL PRICE
          TPRICE:= TPRICE + (PPRICE * CQUANTITY)*(1-(DISCOUNT/100));
          DBMS_OUTPUT.PUT_LINE('PID CARTQUANTITY PPRICE TOTALPRICE');
          DBMS_OUTPUT.PUT_LINE(PID|| '  '|| CQUANTITY|| '  '|| PPRICE|| '  '|| TPRICE);
          INSERT INTO ORDERS VALUES (CARTID,USERID,PID,SYSDATE, TPRICE,'PROCESSING',PAYTYPE);
          
-- 					SELECT PRODUCT_ID,QUANTITY INTO PID, CQUANTITY FROM CART WHERE CART_ID=CARTID AND USER_ID= USERID  AND PRODUCT_ID=PROD.PRODUCT_ID;
-- 					SELECT PRICE,DISCOUNT_AMOUNT INTO PPRICE, DISCOUNT FROM PRODUCTS JOIN DISCOUNTS ON PRODUCTS.PROMO_CODE=DISCOUNTS.PROMO_CODE WHERE PRODUCT_ID=PID;
 			ELSE
			-- FETCH CART QUANTITY OF PRODUCT
				SELECT PRODUCT_ID,QUANTITY INTO PID, CQUANTITY FROM CART WHERE CART_ID=CARTID AND USER_ID= USERID  AND PRODUCT_ID=PROD.PRODUCT_ID;
				-- FETCH STOCK QUANTITY AND PRICE
				SELECT STOCK_QUANTITY,PRICE INTO PSTOCK,PPRICE FROM PRODUCTS WHERE PRODUCT_ID=PID;
				--EXCEEDS STOCK OR NOT
				IF CQUANTITY> PSTOCK THEN 
						DBMS_OUTPUT.PUT_LINE('NO STOCK');
				ELSE 
					PPRICE := CQUANTITY * PPRICE;
					TPRICE := TPRICE + PPRICE;
					DBMS_OUTPUT.PUT_LINE('PID CARTQUANTITY PPRICE TOTALPRICE');
					DBMS_OUTPUT.PUT_LINE(PID|| '  '|| CQUANTITY|| '  '|| PPRICE|| '  '|| TPRICE);
					DBMS_OUTPUT.PUT_LINE('IN STOCK');
					INSERT INTO ORDERS VALUES (CARTID,USERID,PID,SYSDATE, TPRICE,'PROCESSING',PAYTYPE);
					
				END IF;
			
			END IF;
			
 		END LOOP;
-- 	INVOICE:= 'ARAFAT';
	DBMS_OUTPUT.PUT_LINE('HELLO');
	RETURN N;
END;